{"ast":null,"code":"var _jsxFileName = \"/Users/sorcerer/linkify/linkify-frontend/src/pages/Companies.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Building2, Users, Target, TrendingUp, Lightbulb, ExternalLink, Globe } from 'lucide-react';\nimport { apiService } from '../services/api';\nimport { useAuth } from '../contexts/AuthContext';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Companies = () => {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const [analysis, setAnalysis] = useState(null);\n  const [linkedinUrl, setLinkedinUrl] = useState('');\n  const [peopleResults, setPeopleResults] = useState([]);\n  const {\n    user\n  } = useAuth();\n  const [domData, setDomData] = useState(null);\n  useEffect(() => {\n    const handleWindowMessage = async event => {\n      // Optional: restrict to the extension origin\n      // if (!event.origin.startsWith('chrome-extension://')) return;\n\n      const payload = event.data;\n      console.log('Payload:', payload);\n      if ((payload === null || payload === void 0 ? void 0 : payload.type) === 'LINKIFY_EXTENSION_DATA') {\n        try {\n          var _response$data, _response$data$compan;\n          console.log('Data received via window message:', payload.data);\n          const {\n            url,\n            scrapedData\n          } = payload.data;\n          setLinkedinUrl(url);\n          setDomData(scrapedData);\n          toast.success(\"LinkedIn data loaded! Running analysis...\");\n          if (!(user !== null && user !== void 0 && user.domain)) {\n            toast.error('Account domain not found. Please check your profile settings.');\n            return;\n          }\n          const response = await apiService.analyzeCompanyData(url, user.domain, scrapedData);\n          console.log('Analysis response:', response.data);\n          setAnalysis(response.data);\n          toast.success('Analysis completed successfully');\n          if ((_response$data = response.data) !== null && _response$data !== void 0 && (_response$data$compan = _response$data.company) !== null && _response$data$compan !== void 0 && _response$data$compan.analysis_data && window.parent) {\n            console.log('Sending message to parent');\n            window.parent.postMessage({\n              type: 'START_PEOPLE_SEARCH',\n              data: {\n                companyName: response.data.company.analysis_data.company_information.company_name,\n                personas: response.data.company.analysis_data.personas.map(persona => {\n                  return {\n                    type: persona.type,\n                    linkedin_search_title: persona.linkedin_search_title\n                  };\n                })\n              }\n            }, '*');\n            console.log(\"window.parent\", window.parent);\n            console.log('Message sent to parent');\n          }\n        } catch (err) {\n          var _err$response, _err$response$data;\n          console.error('Analysis error:', err);\n          toast.error((err === null || err === void 0 ? void 0 : (_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.error) || 'Failed to analyze company');\n        }\n      } else if ((payload === null || payload === void 0 ? void 0 : payload.type) === 'LINKIFY_PEOPLE_RESULT') {\n        try {\n          const result = payload.data;\n          setPeopleResults(prev => [...prev, result]);\n          toast.success(`Received person for ${result.personaType}`);\n        } catch (e) {\n          console.error('Error handling people result:', e);\n        }\n      }\n    };\n    window.addEventListener('message', handleWindowMessage);\n    return () => window.removeEventListener('message', handleWindowMessage);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-7xl mx-auto space-y-6\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n_s(Companies, \"PMqgxIH74D2BqRx1FKLiGzfCMyY=\", false, function () {\n  return [useAuth];\n});\n_c = Companies;\nexport default Companies;\nvar _c;\n$RefreshReg$(_c, \"Companies\");","map":{"version":3,"names":["React","useState","useEffect","Building2","Users","Target","TrendingUp","Lightbulb","ExternalLink","Globe","apiService","useAuth","toast","jsxDEV","_jsxDEV","Companies","_s","loading","setLoading","analysis","setAnalysis","linkedinUrl","setLinkedinUrl","peopleResults","setPeopleResults","user","domData","setDomData","handleWindowMessage","event","payload","data","console","log","type","_response$data","_response$data$compan","url","scrapedData","success","domain","error","response","analyzeCompanyData","company","analysis_data","window","parent","postMessage","companyName","company_information","company_name","personas","map","persona","linkedin_search_title","err","_err$response","_err$response$data","result","prev","personaType","e","addEventListener","removeEventListener","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sorcerer/linkify/linkify-frontend/src/pages/Companies.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Building2, Users, Target, TrendingUp, Lightbulb, ExternalLink, Globe } from 'lucide-react';\nimport { apiService } from '../services/api';\nimport { useAuth } from '../contexts/AuthContext';\nimport toast from 'react-hot-toast';\n\nconst Companies = () => {\n  const [loading, setLoading] = useState(false);\n  const [analysis, setAnalysis] = useState(null);\n  const [linkedinUrl, setLinkedinUrl] = useState('');\n  const [peopleResults, setPeopleResults] = useState([]);\n  const { user } = useAuth();\n\n\n  const [domData, setDomData] = useState(null);\n\n  useEffect(() => {\n    const handleWindowMessage = async (event) => {\n      // Optional: restrict to the extension origin\n      // if (!event.origin.startsWith('chrome-extension://')) return;\n  \n      const payload = event.data;\n      console.log('Payload:', payload);\n      if (payload?.type === 'LINKIFY_EXTENSION_DATA') {\n        try {\n          console.log('Data received via window message:', payload.data);\n          const { url, scrapedData } = payload.data;\n          setLinkedinUrl(url);\n          setDomData(scrapedData);\n          toast.success(\"LinkedIn data loaded! Running analysis...\");\n\n          if (!user?.domain) {\n            toast.error('Account domain not found. Please check your profile settings.');\n            return;\n          }\n\n          const response = await apiService.analyzeCompanyData(url, user.domain, scrapedData);\n          console.log('Analysis response:', response.data);\n          setAnalysis(response.data);\n          toast.success('Analysis completed successfully');\n          if (response.data?.company?.analysis_data && window.parent) {\n            console.log('Sending message to parent');\n            window.parent.postMessage({\n              type: 'START_PEOPLE_SEARCH',\n             \n              data: {\n                companyName: response.data.company.analysis_data.company_information.company_name,\n                personas: response.data.company.analysis_data.personas.map(persona => {\n                  return {\n                    type: persona.type,\n                    linkedin_search_title: persona.linkedin_search_title\n                  }\n                })\n              }\n            }, '*');\n\n\nconsole.log(\"window.parent\", window.parent);\n\n            console.log('Message sent to parent');\n          }\n        } catch (err) {\n          console.error('Analysis error:', err);\n          toast.error(err?.response?.data?.error || 'Failed to analyze company');\n        }\n      } else if (payload?.type === 'LINKIFY_PEOPLE_RESULT') {\n        try {\n          const result = payload.data;\n          setPeopleResults(prev => [...prev, result]);\n          toast.success(`Received person for ${result.personaType}`);\n        } catch (e) {\n          console.error('Error handling people result:', e);\n        }\n      }\n    };\n  \n    window.addEventListener('message', handleWindowMessage);\n    return () => window.removeEventListener('message', handleWindowMessage);\n  }, []);\n\n\n\n\n\n \n\n \n  return (\n    <div className=\"max-w-7xl mx-auto space-y-6\">\n      {/* Header */}\n    \n    </div>\n  );\n};\n\nexport default Companies;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}