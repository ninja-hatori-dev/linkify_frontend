{"ast":null,"code":"var _jsxFileName = \"/Users/sorcerer/linkify/linkify-frontend/src/pages/Companies.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Building2, Users, Target, TrendingUp, Lightbulb, ExternalLink, Globe } from 'lucide-react';\nimport { apiService } from '../services/api';\nimport { useAuth } from '../contexts/AuthContext';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Companies = () => {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const [analysis, setAnalysis] = useState(null);\n  const [linkedinUrl, setLinkedinUrl] = useState('');\n  const {\n    user\n  } = useAuth();\n  const [domData, setDomData] = useState(null);\n  useEffect(() => {\n    const handleWindowMessage = event => {\n      // Optional: restrict to the extension origin\n      // if (!event.origin.startsWith('chrome-extension://')) return;\n\n      const payload = event.data;\n      console.log('Payload:', payload);\n      if ((payload === null || payload === void 0 ? void 0 : payload.type) === 'LINKIFY_EXTENSION_DATA') {\n        console.log('Data received via window message:', payload.data);\n        const {\n          url,\n          scrapedData\n        } = payload.data;\n        setLinkedinUrl(url);\n        setDomData(scrapedData);\n        toast.success(\"LinkedIn data loaded! Click 'Analyze' to continue.\");\n      }\n      apiService.analyzeCompanyData(linkedinUrl, user.domain, domData);\n    };\n    window.addEventListener('message', handleWindowMessage);\n    return () => window.removeEventListener('message', handleWindowMessage);\n  }, []);\n  const repairJSON = jsonString => {\n    try {\n      // Common JSON repair strategies\n      let repaired = jsonString;\n\n      // Fix trailing commas in arrays and objects\n      repaired = repaired.replace(/,(\\s*[}\\]])/g, '$1');\n\n      // Fix missing commas between array elements\n      repaired = repaired.replace(/\"\\s*\\n\\s*\"/g, '\", \"');\n      repaired = repaired.replace(/}\\s*\\n\\s*{/g, '}, {');\n      repaired = repaired.replace(/]\\s*\\n\\s*\\[/g, '], [');\n\n      // Fix missing commas after array elements (more aggressive)\n      repaired = repaired.replace(/\"\\s+\"/g, '\", \"');\n      repaired = repaired.replace(/}\\s+{/g, '}, {');\n      repaired = repaired.replace(/]\\s+\\[/g, '], [');\n\n      // Fix missing commas after closing brackets/braces followed by quotes\n      repaired = repaired.replace(/}\\s*\"/g, '}, \"');\n      repaired = repaired.replace(/]\\s*\"/g, '], \"');\n\n      // Fix missing commas between object properties\n      repaired = repaired.replace(/\"\\s*\\n\\s*\"/g, '\", \"');\n      repaired = repaired.replace(/\"\\s*\\n\\s*[a-zA-Z_]/g, match => {\n        return match.replace(/\\n\\s*/, ', \"');\n      });\n\n      // Fix unclosed strings (basic attempt)\n      const quotes = repaired.match(/\"/g);\n      if (quotes && quotes.length % 2 !== 0) {\n        repaired += '\"';\n      }\n\n      // Fix unclosed brackets/braces\n      const openBraces = (repaired.match(/{/g) || []).length;\n      const closeBraces = (repaired.match(/}/g) || []).length;\n      const openBrackets = (repaired.match(/\\[/g) || []).length;\n      const closeBrackets = (repaired.match(/]/g) || []).length;\n\n      // Add missing closing braces\n      for (let i = 0; i < openBraces - closeBraces; i++) {\n        repaired += '}';\n      }\n\n      // Add missing closing brackets\n      for (let i = 0; i < openBrackets - closeBrackets; i++) {\n        repaired += ']';\n      }\n      return repaired;\n    } catch (error) {\n      console.log('JSON repair failed:', error);\n      return jsonString;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-7xl mx-auto space-y-6\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n_s(Companies, \"iGUSCiYNA+G/UdtvJ8Zg1EwJdc0=\", false, function () {\n  return [useAuth];\n});\n_c = Companies;\nexport default Companies;\nvar _c;\n$RefreshReg$(_c, \"Companies\");","map":{"version":3,"names":["React","useState","useEffect","Building2","Users","Target","TrendingUp","Lightbulb","ExternalLink","Globe","apiService","useAuth","toast","jsxDEV","_jsxDEV","Companies","_s","loading","setLoading","analysis","setAnalysis","linkedinUrl","setLinkedinUrl","user","domData","setDomData","handleWindowMessage","event","payload","data","console","log","type","url","scrapedData","success","analyzeCompanyData","domain","window","addEventListener","removeEventListener","repairJSON","jsonString","repaired","replace","match","quotes","length","openBraces","closeBraces","openBrackets","closeBrackets","i","error","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sorcerer/linkify/linkify-frontend/src/pages/Companies.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Building2, Users, Target, TrendingUp, Lightbulb, ExternalLink, Globe } from 'lucide-react';\nimport { apiService } from '../services/api';\nimport { useAuth } from '../contexts/AuthContext';\nimport toast from 'react-hot-toast';\n\nconst Companies = () => {\n  const [loading, setLoading] = useState(false);\n  const [analysis, setAnalysis] = useState(null);\n  const [linkedinUrl, setLinkedinUrl] = useState('');\n  const { user } = useAuth();\n\n\n  const [domData, setDomData] = useState(null);\n\n  useEffect(() => {\n    const handleWindowMessage = (event) => {\n      // Optional: restrict to the extension origin\n      // if (!event.origin.startsWith('chrome-extension://')) return;\n  \n      const payload = event.data;\n      console.log('Payload:', payload);\n      if (payload?.type === 'LINKIFY_EXTENSION_DATA') {\n        console.log('Data received via window message:', payload.data);\n        const { url, scrapedData } = payload.data;\n        setLinkedinUrl(url);\n        setDomData(scrapedData);\n        toast.success(\"LinkedIn data loaded! Click 'Analyze' to continue.\");\n      }\n\n      apiService.analyzeCompanyData(linkedinUrl, user.domain,domData);\n    };\n  \n    window.addEventListener('message', handleWindowMessage);\n    return () => window.removeEventListener('message', handleWindowMessage);\n  }, []);\n\n\n\n\n\n  const repairJSON = (jsonString) => {\n    try {\n      // Common JSON repair strategies\n      let repaired = jsonString;\n      \n      // Fix trailing commas in arrays and objects\n      repaired = repaired.replace(/,(\\s*[}\\]])/g, '$1');\n      \n      // Fix missing commas between array elements\n      repaired = repaired.replace(/\"\\s*\\n\\s*\"/g, '\", \"');\n      repaired = repaired.replace(/}\\s*\\n\\s*{/g, '}, {');\n      repaired = repaired.replace(/]\\s*\\n\\s*\\[/g, '], [');\n      \n      // Fix missing commas after array elements (more aggressive)\n      repaired = repaired.replace(/\"\\s+\"/g, '\", \"');\n      repaired = repaired.replace(/}\\s+{/g, '}, {');\n      repaired = repaired.replace(/]\\s+\\[/g, '], [');\n      \n      // Fix missing commas after closing brackets/braces followed by quotes\n      repaired = repaired.replace(/}\\s*\"/g, '}, \"');\n      repaired = repaired.replace(/]\\s*\"/g, '], \"');\n      \n      // Fix missing commas between object properties\n      repaired = repaired.replace(/\"\\s*\\n\\s*\"/g, '\", \"');\n      repaired = repaired.replace(/\"\\s*\\n\\s*[a-zA-Z_]/g, (match) => {\n        return match.replace(/\\n\\s*/, ', \"');\n      });\n      \n      // Fix unclosed strings (basic attempt)\n      const quotes = repaired.match(/\"/g);\n      if (quotes && quotes.length % 2 !== 0) {\n        repaired += '\"';\n      }\n      \n      // Fix unclosed brackets/braces\n      const openBraces = (repaired.match(/{/g) || []).length;\n      const closeBraces = (repaired.match(/}/g) || []).length;\n      const openBrackets = (repaired.match(/\\[/g) || []).length;\n      const closeBrackets = (repaired.match(/]/g) || []).length;\n      \n      // Add missing closing braces\n      for (let i = 0; i < openBraces - closeBraces; i++) {\n        repaired += '}';\n      }\n      \n      // Add missing closing brackets\n      for (let i = 0; i < openBrackets - closeBrackets; i++) {\n        repaired += ']';\n      }\n      \n      return repaired;\n    } catch (error) {\n      console.log('JSON repair failed:', error);\n      return jsonString;\n    }\n  };\n\n \n  return (\n    <div className=\"max-w-7xl mx-auto space-y-6\">\n      {/* Header */}\n    \n    </div>\n  );\n};\n\nexport default Companies;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}