{"ast":null,"code":"var _jsxFileName = \"/Users/sorcerer/linkify/linkify-frontend/src/pages/Companies.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Building2, Users, Target, TrendingUp, Lightbulb, ExternalLink, Globe } from 'lucide-react';\nimport { apiService } from '../services/api';\nimport { useAuth } from '../contexts/AuthContext';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Companies = () => {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const [analysis, setAnalysis] = useState(null);\n  const [linkedinUrl, setLinkedinUrl] = useState('');\n  const {\n    user\n  } = useAuth();\n  const [domData, setDomData] = useState(null);\n  useEffect(() => {\n    const handleWindowMessage = async event => {\n      // Optional: restrict to the extension origin\n      // if (!event.origin.startsWith('chrome-extension://')) return;\n\n      const payload = event.data;\n      console.log('Payload:', payload);\n      if ((payload === null || payload === void 0 ? void 0 : payload.type) === 'LINKIFY_EXTENSION_DATA') {\n        try {\n          var _response$data, _response$data$compan;\n          console.log('Data received via window message:', payload.data);\n          const {\n            url,\n            scrapedData\n          } = payload.data;\n          setLinkedinUrl(url);\n          setDomData(scrapedData);\n          toast.success(\"LinkedIn data loaded! Running analysis...\");\n          if (!(user !== null && user !== void 0 && user.domain)) {\n            toast.error('Account domain not found. Please check your profile settings.');\n            return;\n          }\n          const response = await apiService.analyzeCompanyData(url, user.domain, scrapedData);\n          console.log('Analysis response:', response.data);\n          setAnalysis(response.data);\n          toast.success('Analysis completed successfully');\n          if (window.chrome && (_response$data = response.data) !== null && _response$data !== void 0 && (_response$data$compan = _response$data.company) !== null && _response$data$compan !== void 0 && _response$data$compan.analysis_data) {\n            chrome.runtime.sendMessage({\n              action: \"startPeopleSearch\",\n              data: response.data.company.analysis_data // Send the analysis data\n            });\n          }\n        } catch (err) {\n          var _err$response, _err$response$data;\n          console.error('Analysis error:', err);\n          toast.error((err === null || err === void 0 ? void 0 : (_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.error) || 'Failed to analyze company');\n        }\n      }\n    };\n    window.addEventListener('message', handleWindowMessage);\n    return () => window.removeEventListener('message', handleWindowMessage);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-7xl mx-auto space-y-6\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(Companies, \"iGUSCiYNA+G/UdtvJ8Zg1EwJdc0=\", false, function () {\n  return [useAuth];\n});\n_c = Companies;\nexport default Companies;\nvar _c;\n$RefreshReg$(_c, \"Companies\");","map":{"version":3,"names":["React","useState","useEffect","Building2","Users","Target","TrendingUp","Lightbulb","ExternalLink","Globe","apiService","useAuth","toast","jsxDEV","_jsxDEV","Companies","_s","loading","setLoading","analysis","setAnalysis","linkedinUrl","setLinkedinUrl","user","domData","setDomData","handleWindowMessage","event","payload","data","console","log","type","_response$data","_response$data$compan","url","scrapedData","success","domain","error","response","analyzeCompanyData","window","chrome","company","analysis_data","runtime","sendMessage","action","err","_err$response","_err$response$data","addEventListener","removeEventListener","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sorcerer/linkify/linkify-frontend/src/pages/Companies.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Building2, Users, Target, TrendingUp, Lightbulb, ExternalLink, Globe } from 'lucide-react';\nimport { apiService } from '../services/api';\nimport { useAuth } from '../contexts/AuthContext';\nimport toast from 'react-hot-toast';\n\nconst Companies = () => {\n  const [loading, setLoading] = useState(false);\n  const [analysis, setAnalysis] = useState(null);\n  const [linkedinUrl, setLinkedinUrl] = useState('');\n  const { user } = useAuth();\n\n\n  const [domData, setDomData] = useState(null);\n\n  useEffect(() => {\n    const handleWindowMessage = async (event) => {\n      // Optional: restrict to the extension origin\n      // if (!event.origin.startsWith('chrome-extension://')) return;\n  \n      const payload = event.data;\n      console.log('Payload:', payload);\n      if (payload?.type === 'LINKIFY_EXTENSION_DATA') {\n        try {\n          console.log('Data received via window message:', payload.data);\n          const { url, scrapedData } = payload.data;\n          setLinkedinUrl(url);\n          setDomData(scrapedData);\n          toast.success(\"LinkedIn data loaded! Running analysis...\");\n\n          if (!user?.domain) {\n            toast.error('Account domain not found. Please check your profile settings.');\n            return;\n          }\n\n          const response = await apiService.analyzeCompanyData(url, user.domain, scrapedData);\n          console.log('Analysis response:', response.data);\n          setAnalysis(response.data);\n          toast.success('Analysis completed successfully');\n          if (window.chrome && response.data?.company?.analysis_data) {\n            chrome.runtime.sendMessage({\n              action: \"startPeopleSearch\",\n              data: response.data.company.analysis_data // Send the analysis data\n            });\n          }\n\n\n\n        } catch (err) {\n          console.error('Analysis error:', err);\n          toast.error(err?.response?.data?.error || 'Failed to analyze company');\n        }\n      }\n    };\n  \n    window.addEventListener('message', handleWindowMessage);\n    return () => window.removeEventListener('message', handleWindowMessage);\n  }, []);\n\n\n\n\n\n \n\n \n  return (\n    <div className=\"max-w-7xl mx-auto space-y-6\">\n      {/* Header */}\n    \n    </div>\n  );\n};\n\nexport default Companies;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}