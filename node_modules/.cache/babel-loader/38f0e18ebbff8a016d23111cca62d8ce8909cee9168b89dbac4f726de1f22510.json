{"ast":null,"code":"var _jsxFileName = \"/Users/sorcerer/linkify/linkify-frontend/src/pages/AuthCallback.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport { apiService } from '../services/api';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthCallback = () => {\n  _s();\n  const navigate = useNavigate();\n  const [searchParams] = useSearchParams();\n  const {\n    login,\n    notifyExtensionAuth,\n    isInExtension\n  } = useAuth();\n  useEffect(() => {\n    const handleAuthCallback = async () => {\n      const token = searchParams.get('token');\n      const error = searchParams.get('error');\n      if (error) {\n        toast.error('Authentication failed');\n        navigate('/login');\n        return;\n      }\n      if (token) {\n        try {\n          login(token);\n\n          // Get user data and account domain\n          apiService.setAuthToken(token);\n          const userResponse = await apiService.verifyAuth();\n          if (userResponse.data.valid) {\n            const userData = userResponse.data.user;\n\n            // Extract account domain from user's email or company info\n            const accountDomain = userData.email ? userData.email.split('@')[1] : userData.accountDomain || '';\n\n            // Notify extension if running in iframe\n            if (isInExtension) {\n              notifyExtensionAuth(token, userData, accountDomain);\n              // Don't navigate if in extension - let extension handle it\n              toast.success('Authentication successful! You can now use the extension.');\n            } else {\n              toast.success('Welcome to Linkify!');\n              navigate('/companies');\n            }\n          }\n        } catch (error) {\n          console.error('Login error:', error);\n          toast.error('Authentication failed');\n          if (!isInExtension) {\n            navigate('/login');\n          }\n        }\n      } else {\n        toast.error('No authentication token received');\n        navigate('/login');\n      }\n    };\n    handleAuthCallback();\n  }, [searchParams, login, navigate]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen flex items-center justify-center bg-gray-50\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner mx-auto mb-4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl font-semibold text-gray-900 mb-2\",\n        children: \"Completing Authentication...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-600\",\n        children: \"Please wait while we set up your account.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthCallback, \"ZcnYPeeJOm6DDKXH4vrTng9VcdI=\", false, function () {\n  return [useNavigate, useSearchParams, useAuth];\n});\n_c = AuthCallback;\nexport default AuthCallback;\nvar _c;\n$RefreshReg$(_c, \"AuthCallback\");","map":{"version":3,"names":["React","useEffect","useNavigate","useSearchParams","useAuth","apiService","toast","jsxDEV","_jsxDEV","AuthCallback","_s","navigate","searchParams","login","notifyExtensionAuth","isInExtension","handleAuthCallback","token","get","error","setAuthToken","userResponse","verifyAuth","data","valid","userData","user","accountDomain","email","split","success","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sorcerer/linkify/linkify-frontend/src/pages/AuthCallback.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport { apiService } from '../services/api';\nimport toast from 'react-hot-toast';\n\nconst AuthCallback = () => {\n  const navigate = useNavigate();\n  const [searchParams] = useSearchParams();\n  const { login, notifyExtensionAuth, isInExtension } = useAuth();\n\n  useEffect(() => {\n    const handleAuthCallback = async () => {\n      const token = searchParams.get('token');\n      const error = searchParams.get('error');\n\n      if (error) {\n        toast.error('Authentication failed');\n        navigate('/login');\n        return;\n      }\n\n      if (token) {\n        try {\n          login(token);\n          \n          // Get user data and account domain\n          apiService.setAuthToken(token);\n          const userResponse = await apiService.verifyAuth();\n          \n          if (userResponse.data.valid) {\n            const userData = userResponse.data.user;\n            \n            // Extract account domain from user's email or company info\n            const accountDomain = userData.email ? \n              userData.email.split('@')[1] : \n              userData.accountDomain || '';\n            \n            // Notify extension if running in iframe\n            if (isInExtension) {\n              notifyExtensionAuth(token, userData, accountDomain);\n              // Don't navigate if in extension - let extension handle it\n              toast.success('Authentication successful! You can now use the extension.');\n            } else {\n              toast.success('Welcome to Linkify!');\n              navigate('/companies');\n            }\n          }\n        } catch (error) {\n          console.error('Login error:', error);\n          toast.error('Authentication failed');\n          if (!isInExtension) {\n            navigate('/login');\n          }\n        }\n      } else {\n        toast.error('No authentication token received');\n        navigate('/login');\n      }\n    };\n\n    handleAuthCallback();\n  }, [searchParams, login, navigate]);\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n      <div className=\"text-center\">\n        <div className=\"spinner mx-auto mb-4\"></div>\n        <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">\n          Completing Authentication...\n        </h2>\n        <p className=\"text-gray-600\">\n          Please wait while we set up your account.\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default AuthCallback;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}